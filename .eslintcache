[{"/home/fsilva/Projects/stocks-watchlist/src/index.tsx":"1","/home/fsilva/Projects/stocks-watchlist/src/serviceWorker.ts":"2","/home/fsilva/Projects/stocks-watchlist/src/components/app/index.tsx":"3","/home/fsilva/Projects/stocks-watchlist/src/components/app/app.tsx":"4","/home/fsilva/Projects/stocks-watchlist/src/routes/dashboard/index.tsx":"5","/home/fsilva/Projects/stocks-watchlist/src/routes/settings/index.tsx":"6","/home/fsilva/Projects/stocks-watchlist/src/routes/dashboard/dashboard.tsx":"7","/home/fsilva/Projects/stocks-watchlist/src/routes/settings/settings.tsx":"8","/home/fsilva/Projects/stocks-watchlist/src/utils/pushshift.tsx":"9","/home/fsilva/Projects/stocks-watchlist/src/utils/http.tsx":"10","/home/fsilva/Projects/stocks-watchlist/src/components/crawler/index.tsx":"11","/home/fsilva/Projects/stocks-watchlist/src/components/crawler/crawler.tsx":"12","/home/fsilva/Projects/stocks-watchlist/src/utils/yahoo.tsx":"13"},{"size":463,"mtime":1610806530208,"results":"14","hashOfConfig":"15"},{"size":5077,"mtime":1610806352800,"results":"16","hashOfConfig":"15"},{"size":50,"mtime":1610803607557,"results":"17","hashOfConfig":"15"},{"size":2214,"mtime":1610824916728,"results":"18","hashOfConfig":"15"},{"size":68,"mtime":1610802532757,"results":"19","hashOfConfig":"15"},{"size":65,"mtime":1610802610124,"results":"20","hashOfConfig":"15"},{"size":332,"mtime":1610825167599,"results":"21","hashOfConfig":"15"},{"size":172,"mtime":1610806352800,"results":"22","hashOfConfig":"15"},{"size":2540,"mtime":1610836966470,"results":"23","hashOfConfig":"15"},{"size":312,"mtime":1610834770886,"results":"24","hashOfConfig":"15"},{"size":62,"mtime":1610824320962,"results":"25","hashOfConfig":"15"},{"size":719,"mtime":1610830958786,"results":"26","hashOfConfig":"15"},{"size":2363,"mtime":1610836543215,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"8tnm22",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fsilva/Projects/stocks-watchlist/src/index.tsx",[],[],"/home/fsilva/Projects/stocks-watchlist/src/serviceWorker.ts",["60","61"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/home/fsilva/Projects/stocks-watchlist/src/components/app/index.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/components/app/app.tsx",["62","63","64","65"],"import React, { useEffect, useState } from 'react';\nimport { HashRouter, Link, Route, RouteComponentProps, withRouter } from 'react-router-dom';\nimport ReactGA, { FieldsObject } from 'react-ga';\nimport { Layout, Menu } from 'antd';\n\nimport Dashboard from '../../routes/dashboard';\nimport Settings from '../../routes/settings';\n\nimport logo from '../../assets/logo.svg';\n\nimport './app.css';\nimport Crawler from '../crawler';\n\nconst { Header, Sider, Content } = Layout;\n\n// ReactGA.initialize('UA-50201175-2', { testMode: process.env.NODE_ENV !== 'production' });\n\nconst withTracker = <P extends RouteComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: FieldsObject = {},\n) => {\n  const trackPage = (page: string) => {\n    // ReactGA.set({ page, ...options });\n    // ReactGA.pageview(page);\n  };\n\n  const trackPageWithEffect = (props: P) => {\n    useEffect(() => {\n      trackPage(props.location.pathname);\n    }, [props.location.pathname]);\n\n    return <WrappedComponent {...props} />;\n  };\n\n  return trackPageWithEffect;\n};\n\nfunction getKeyFromLocation(pathname: string): string {\n  if (pathname === '/') {\n    return 'dashboard';\n  }\n\n  return pathname.substr(1);\n}\n\nconst SiderWithRouter = withRouter(({ location }) => (\n  <Sider width='300px'>\n    <Menu theme='dark' selectedKeys={[getKeyFromLocation(location.pathname)]}>\n      <Menu.Item key='dashboard'>\n        <Link to='/dashboard'>Dashboard</Link>\n      </Menu.Item>\n      <Menu.Item key='settings'>\n        <Link to='/settings'>Settings</Link>\n      </Menu.Item>\n    </Menu>\n  </Sider>\n));\n\nexport const App: React.FC = () => (\n  <HashRouter>\n    <Layout>\n      <Header>\n        <div className='logo'>\n          <img src={logo} className='icon' alt='logo' />\n          <a href='.'>Stocks Watchlist</a>\n        </div>\n        <Crawler />\n        <div className='links'>\n          <a href='https://github.com/silvafj/stocks-watchlist'>GitHub</a>\n        </div>\n      </Header>\n      <SiderWithRouter />\n      <Content>\n        <Route exact path={['/', '/dashboard']} component={withTracker(Dashboard)} />\n        <Route exact path={['/settings']} component={withTracker(Settings)} />\n      </Content>\n    </Layout>\n  </HashRouter>\n);\n","/home/fsilva/Projects/stocks-watchlist/src/routes/dashboard/index.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/routes/settings/index.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/routes/dashboard/dashboard.tsx",["66"],"import React, { useState } from 'react';\nimport { Layout } from 'antd';\n\nimport './dashboard.css';\n\nexport const Dashboard: React.FC = () => {\n  return (\n    <Layout>\n      <ul>\n        {/* {submissions.map((submission, index) => (\n          <li key={index}>{submission.title}</li>\n        ))} */}\n      </ul>\n    </Layout>\n  );\n};\n","/home/fsilva/Projects/stocks-watchlist/src/routes/settings/settings.tsx",["67"],"import React, { useState } from 'react';\nimport { Layout } from 'antd';\n\nimport './settings.css';\n\nexport const Settings: React.FC = () => {\n  return <Layout></Layout>;\n};\n","/home/fsilva/Projects/stocks-watchlist/src/utils/pushshift.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/utils/http.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/components/crawler/index.tsx",[],"/home/fsilva/Projects/stocks-watchlist/src/components/crawler/crawler.tsx",["68","69"],"import React, { useEffect, useState } from 'react';\nimport { Button } from 'antd';\n\nimport './crawler.css';\nimport {\n  extractTickers,\n  sanitizeTickers,\n  searchSubmissions,\n  Submission,\n} from '../../utils/pushshift';\n\nexport const Crawler: React.FC = () => {\n  const [submissions, setSubmissions] = useState<Submission[]>([]);\n\n  async function crawl() {\n    const submissions = await searchSubmissions(new Date(2021, 0, 16), 'pennystocks');\n    setSubmissions(submissions);\n    console.log(submissions);\n    let tickers = extractTickers(submissions);\n    console.log(tickers);\n    tickers = await sanitizeTickers(tickers);\n    console.log(tickers);\n  }\n\n  return <Button onClick={() => crawl()}>Crawl</Button>;\n};\n","/home/fsilva/Projects/stocks-watchlist/src/utils/yahoo.tsx",[],{"ruleId":"70","severity":1,"message":"71","line":26,"column":8,"nodeType":"72","messageId":"73","endLine":26,"endColumn":42},{"ruleId":"70","severity":1,"message":"71","line":123,"column":8,"nodeType":"72","messageId":"73","endLine":123,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":1,"column":28,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"74","severity":1,"message":"78","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":15},{"ruleId":"74","severity":1,"message":"79","line":20,"column":3,"nodeType":"76","messageId":"77","endLine":20,"endColumn":24},{"ruleId":"74","severity":1,"message":"80","line":22,"column":22,"nodeType":"76","messageId":"77","endLine":22,"endColumn":34},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"81","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"82","line":13,"column":10,"nodeType":"76","messageId":"77","endLine":13,"endColumn":21},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ReactGA' is defined but never used.","'options' is assigned a value but never used.","'page' is defined but never used.","'useEffect' is defined but never used.","'submissions' is assigned a value but never used."]